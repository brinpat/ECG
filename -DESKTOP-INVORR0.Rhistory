layer_dense(15,activation = "relu", kernel_regularizer = regularizer_l2(l = 0.001))%>%
layer_dropout(0.5)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.2,
verbose = 1
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu", kernel_regularizer = regularizer_l2(l = 0.001))%>%
layer_dropout(0.5)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.5)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.4)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 30,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.5)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(50,activation = "relu")%>%
layer_dropout(0.5)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(200,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(100,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(80,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 20,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.5,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.4,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
#Fit model
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.4,
verbose = 1
)
model <- keras_model_sequential()%>%
layer_flatten(input_shape = c(200, 1)) %>%
layer_dense(25,activation = "relu")%>%
layer_dropout(0.6)%>%
layer_dense(3, activation = "softmax")
#Compile model
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = x_train, y = y_train,
epochs = 15,
validation_split = 0.4,
verbose = 1
)
